praymodal
  .modal(role="dialog", id="{ opts.modid }")
    .modal-dialog
      .modal-content(class="{ opts.modcolor }")
        .modal-header.panel-heading
          button(type="button", data-dismiss="modal").close &times;
          h4.modal-title { opts.modtitle }: { modalobj.prayed }({ modalobj.minupdated })
        .modal-body
          form(ref="formref", onsubmit="return false;")
            fieldset.form-group
              label.radio-inline(each="{ elem }") #[input(type="radio", name="elemradio", value="{ value }", onchange="{ filterseed }")] { text }
            fieldset.form-group
              label.radio-inline(each="{ isgate }") #[input(type="radio", name="gateradio", value="{ value }", onchange="{ filterseed }")] { text }
            fieldset.form-group
              select.form-control(name="seedselect", onchange="{ calc }")
            fieldset.form-group
              select.form-control(name="digitselect", onchange="{ calc }")
            fieldset.form-group
              .row
                .col-xs-6
                  select.form-control(name="sizeselect", onchange="{ calc }")
                    option(each="{ size }", value="{ value }") { text }
                .col-xs-6
                  select.form-control(style="width:auto", name="waveselect", onchange="{ calc }")
                    option(each="{ wave }", value="{ value }") { text }

  script.
    var self = this
    var seedselectized
    var digitselectized
    self.modalobj = {
      seedselect: "",
      selected: { name: "", hp: 0 },
      digitselect: "0",
      sizeselect: "1.72",
      waveselect: "1.0",
      prayed: "-",
      minupdated: "-分"
    }
    self.seeddef = seed.map(function(obj) {
      obj.extname += obj.name + convertToHira(obj.name)
      obj.elm += "all"
      obj.value = obj.name + "," + obj.hp + "," + obj.size
      return obj
    })

    calc(e) {
      self.modalobj[e.target.name] = e.target.value
      self.modalobj.selected = setseed(seedselect)
      self.prayed = objtopray(self.modalobj)
      self.update()
    }
    function convertToHira(str) {
      return str.replace(/[\u30a1-\u30f6]/g, function (match) {
        var chr = match.charCodeAt(0) - 0x60
        return String.fromCharCode(chr)
      })
    }
    function setseed(str) {
      var arr = str.split(",")
      return { name: arr[0], hp: Number(arr[1])/Number(arr[2]) }
    }
    function praycalc(seedhp,inputhp,scale,wave) {
      return Math.round((inputhp / seedhp*scale -1) * 100 / wave)
    }
    function objtopray(obj) {
      var seedhp = obj.selected.hp
      var inputhp = Number(obj.digitselect)
      var scale = Number(obj.sizeselect)
      var wave = Number(obj.waveselect)
      return praycalc(seedhp,inputhp,scale,wave).toLocaleString()
    }
    filterseed() {
      self.seedfil = self.seeddef.filter(function(seed,index) {
        if((seed.elm).indexOf(self.modalobj.elemradio) >= 0) {
          if(self.modalobj.gateradio === "true") {
            if(seed.gate === true) return true
          } else return true
        }
      })
      seedselectized[0].selectize.clearOptions()
      seedselectized[0].selectize.addOption(self.seedfil)
      seedselectized[0].selectize.refreshOptions()
    }
    self.elem = [
      { text: "all", value: "all" },
      { text: "炎", value: "fire" },
      { text: "水", value: "water" },
      { text: "風", value: "wind" },
      { text: "光", value: "light" },
      { text: "闇", value: "dark" }
    ]
    self.isgate = [
      { text: "すべて", value: false },
      { text: "ゲートから出るもののみ", value: true }
    ]
    self.size = [
      { text: "1.72", value: 1.72 },
      { text: "1.75", value: 1.75 },
      { text: "1.80", value: 1.80 },
      { text: "1.00", value: 1.00 }
    ]
    self.wave = [
      { text: "1体目", value: 1.0 },
      { text: "2体目", value: 1.2 },
      { text: "3体目", value: 1.4 },
      { text: "4体目", value: 1.6 },
      { text: "5体目", value: 1.8 }
    ]
    self.on('mount', function() {
      self.refs.formref.elemradio.value = "all"
      self.refs.formref.gateradio.value = "false"
      self.seedfil = self.seeddef

      $(function(){
        seedselectized = $(self.refs.formref.seedselect).selectize({
          options: self.seedfil,
          valueField: "value",
          labelField: "name",
          searchField: ["extname"],
          placeholder: "入力補完しますよ"
        })
        digitselectized = $(self.refs.formref.digitselect).selectize({
          options: [],
          valueField: "value",
          labelField: "name",
          searchField: ["value"],
          placeholder: "選択してください",
          load: function(query, callback) {
            if(!query.length) return callback()
            function expanddigit(val,dig) {
              return val * Math.pow(10, dig - String(val).length)
            }
            query = Number(query)
            callcack([
              { text: expanddigit(query, 6).toLocaleString(), value: expanddigit(query, 6) },
              { text: expanddigit(query, 7).toLocaleString(), value: expanddigit(query, 7) },
              { text: expanddigit(query, 8).toLocaleString(), value: expanddigit(query, 8) },
              { text: expanddigit(query, 9).toLocaleString(), value: expanddigit(query, 9) },
              { text: expanddigit(query, 10).toLocaleString(), value: expanddigit(query, 10) }
            ])
          }
        })
      })
    })
    self.on('update', function() {
      self.minupdated = self.parent.tags.jst.clockmin
    })

  style.
    .panel-heading {
      border-top-left-radius: inherit;
      border-top-right-radius: inherit;
    }
