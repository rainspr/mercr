{"dependencies":[{"name":"riot","loc":{"line":2,"column":17}},{"name":"./seedlist.js","loc":{"line":412,"column":22}}],"generated":{"js":"\"use strict\";\n\nvar _riot = require(\"riot\");\n\nvar _riot2 = _interopRequireDefault(_riot);\n\nvar _seedlist = require(\"./seedlist.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_riot2.default.tag2('app', '<section class=\"container\"> <h3>お祈り計算v4 <small>(更新:{document.lastModified})</small></h3> <jst></jst> <div class=\"row\"> <div class=\"col-md-4\"> <div id=\"gnav\"> <div id=\"layer\"> <div class=\"row\"> <div class=\"col-xs-6\"> <button class=\"btn-block alert alert-warning\" value=\"0\" tabindex=\"0\" onclick=\"{toggle}\"> <p class=\"text-left\">左上({min[0]}分)</p> <p class=\"text-left\"><strong>{prayed[0]}</strong></p> </button> </div> <div class=\"col-xs-6\"> <button class=\"btn-block alert alert-danger\" value=\"1\" tabindex=\"0\" onclick=\"{toggle}\"> <p class=\"text-left\">右上({min[1]}分)</p> <p class=\"text-left\"><strong>{prayed[1]}</strong></p> </button> </div> </div> <div class=\"row\"> <div class=\"col-xs-6 col-xs-offset-3\"> <button class=\"btn-block alert alert-default\" value=\"2\" tabindex=\"0\" onclick=\"{toggle}\"> <p class=\"text-left\">ゲート({min[2]}分)</p> <p class=\"text-left\"><strong>{prayed[2]}</strong></p> </button> </div> </div> <div class=\"row\"> <div class=\"col-xs-6\"> <button class=\"btn-block alert alert-info\" value=\"3\" tabindex=\"0\" onclick=\"{toggle}\"> <p class=\"text-left\">左下({min[3]}分)</p> <p class=\"text-left\"><strong>{prayed[3]}</strong></p> </button> </div> <div class=\"col-xs-6\"> <button class=\"btn-block alert alert-success\" value=\"4\" tabindex=\"0\" onclick=\"{toggle}\"> <p class=\"text-left\">右下({min[4]}分)</p> <p class=\"text-left\"><strong>{prayed[4]}</strong></p> </button> </div> </div> </div> </div> <div show=\"{show[0]}\"> <prpanel ptitle=\"左上\" pcolor=\"panel-warning\" pnum=\"0\"></prpanel> </div> <div show=\"{show[1]}\"> <prpanel ptitle=\"右上\" pcolor=\"panel-danger\" pnum=\"1\"></prpanel> </div> <div show=\"{show[2]}\"> <gtpanel ptitle=\"ゲート\" pcolor=\"panel-default\" pnum=\"2\"></gtpanel> </div> <div show=\"{show[3]}\"> <prpanel ptitle=\"左下\" pcolor=\"panel-info\" pnum=\"3\"></prpanel> </div> <div show=\"{show[4]}\"> <prpanel ptitle=\"右下\" pcolor=\"panel-success\" pnum=\"4\"></prpanel> </div> </div> <div class=\"col-md-8\"> <gtdesc></gtdesc> <gpdesc></gpdesc> </div> </div> </section>', 'app .alert-default,[data-is=\"app\"] .alert-default{ background-color: #f5f5f5; border-color: #ddd; } app #gnav,[data-is=\"app\"] #gnav{ background: url(\"ettaso.jpeg\") no-repeat center center; background-size: contain; } app #layer,[data-is=\"app\"] #layer{ background-color: rgba(255,255,255,0.5); }', '', function (opts) {\n\n  this.show = [false, false, true, false, false];\n  this.min = [\"-\", \"-\", \"-\", \"-\", \"-\"];\n  this.prayed = [\"タップしてね\", \"タップしてね\", \"タップしてね\", \"タップしてね\", \"タップしてね\"];\n  this.clockmin = \"\";\n\n  this.on('mount', () => {\n    console.log('app.tag mounted', opts);\n  });\n\n  this.toggle = function (e) {\n    this.show = [false, false, false, false, false];\n    let num = Number(e.currentTarget.value);\n    this.show[num] = true;\n  }.bind(this);\n  this.obs.on(\"oncalc\", (pnum, pray) => {\n    let num = Number(pnum);\n    this.prayed[num] = pray.toLocaleString() + \"%\";\n    this.min[num] = this.clockmin;\n    this.update();\n  });\n  this.obs.on('onclock', clockmin => {\n    this.clockmin = clockmin;\n  });\n});\n\n_riot2.default.tag2('gpdesc', '<div class=\"panel panel-default\"> <div class=\"panel-heading\"> <h4 class=\"panel-title\">ゲート保有GP: <strong>{gpValue}GP</strong></h4> </div> <div class=\"panel-body\"> <form ref=\"formref\" onsubmit=\"return false;\"> <fieldset class=\"form-group\"> <label>役職補正</label> <div class=\"btn-group btn-group-sm\" data-toggle=\"buttons\"> <label class=\"btn btn-default {active: isactive}\" each=\"{sally}\"> <input type=\"radio\" name=\"sallyRadio\" autocomplete=\"off\" riot-value=\"{value}\"> {text} </label> </div> </fieldset> <fieldset class=\"form-group\"> <label>クリア(分)</label> <div class=\"btn-group btn-group-sm\" data-toggle=\"buttons\"> <label class=\"btn btn-default {active: isactive}\" each=\"{lapMin}\"> <input type=\"radio\" name=\"lapMinRadio\" autocomplete=\"off\" riot-value=\"{value}\"> {text} </label> </div> </fieldset> <fieldset class=\"form-group\"> <label>クリア(秒)</label> <div class=\"btn-group btn-group-sm\" data-toggle=\"buttons\"> <label class=\"btn btn-default {active: isactive}\" each=\"{lapSec}\"> <input type=\"radio\" name=\"lapSecRadio\" autocomplete=\"off\" riot-value=\"{value}\"> {text} </label> </div> </fieldset> <fieldset class=\"form-group\" show=\"{iscontinue}\"> <label>コンテ数</label> <div class=\"btn-group btn-group-sm\" data-toggle=\"buttons\"> <label class=\"btn btn-default {active: isactive}\" each=\"{contNum}\"> <input type=\"radio\" name=\"contNumRadio\" autocomplete=\"off\" riot-value=\"{value}\"> {text} </label> </div> </fieldset> <fieldset class=\"form-group\"> <select class=\"form-control\" name=\"digitGP\"></select> </fieldset> </form> </div> </div>', '', '', function (opts) {\n  var self = this;\n  self.iscontinue = false;\n  self.selectizedGP = [];\n  self.gpValue = \"-\";\n  self.objGp = {\n    sRadio: [],\n    lmRadio: [],\n    lsRadio: [],\n    cnRadio: [],\n    dGp: 0\n  };\n  self.sally = [{ text: \"1.0%\", value: \"0.01\", isactive: false }, { text: \"1.5%\", value: \"0.015\", isactive: false }, { text: \"2.0%\", value: \"0.02\", isactive: true }, { text: \"2.5%\", value: \"0.025\", isactive: false }, { text: \"3.0%\", value: \"0.03\", isactive: false }];\n  self.lapMin = [{ text: \"5\", value: \"0\", isactive: true }, { text: \"6\", value: \"60\", isactive: false }, { text: \"7\", value: \"120\", isactive: false }, { text: \"8\", value: \"180\", isactive: false }, { text: \"9\", value: \"240\", isactive: false }, { text: \"10\", value: \"300\", isactive: false }];\n  self.lapSec = [{ text: \"00\", value: \"0\", isactive: true }, { text: \"15\", value: \"15\", isactive: false }, { text: \"30\", value: \"30\", isactive: false }, { text: \"45\", value: \"45\", isactive: false }];\n  self.contNum = [{ text: \"0\", value: \"1.00\", isactive: true }, { text: \"1\", value: \"0.95\", isactive: false }, { text: \"2\", value: \"0.90\", isactive: false }, { text: \"3\", value: \"0.85\", isactive: false }, { text: \"4\", value: \"0.80\", isactive: false }, { text: \"5\", value: \"0.75\", isactive: false }, { text: \"6\", value: \"0.70\", isactive: false }, { text: \"7\", value: \"0.65\", isactive: false }, { text: \"8\", value: \"0.60\", isactive: false }];\n  function setValue() {\n    let gValue = getgtValue({\n      sValue: self.objGp.sRadio.value,\n      cnValue: self.objGp.cnRadio.value,\n      lmValue: self.objGp.lmRadio.value,\n      lsValue: self.objGp.lsRadio.value,\n      dGp: self.objGp.dGp\n    });\n    self.gpValue = numToString(gValue);\n    self.update();\n  }\n  function getgtValue({ sValue, cnValue, lmValue, lsValue, dGp }) {\n    let cleartime = 300 - lmValue - lsValue;\n    if (cleartime < 0) cleartime = 0;\n    let tb = 1 + 0.201 * cleartime / 300;\n    return (dGp - 1000) / tb / sValue / cnValue;\n  }\n  function formatDigit(val, dig) {\n    return val * Math.pow(10, dig - String(val).length);\n  }\n  function numToString(num) {\n    var strarr = num.toString().split('.');\n    strarr[0] = Number(strarr[0]).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    return strarr[0];\n  }\n  self.on('mount', function () {\n    self.objGp.sRadio = self.refs.formref.sallyRadio;\n    self.objGp.lmRadio = self.refs.formref.lapMinRadio;\n    self.objGp.lsRadio = self.refs.formref.lapSecRadio;\n    self.objGp.cnRadio = self.refs.formref.contNumRadio;\n    self.objGp.sRadio.value = \"0.02\";\n    self.objGp.lmRadio.value = \"0\";\n    self.objGp.lsRadio.value = \"0\";\n    self.objGp.cnRadio.value = \"1.00\";\n\n    $(function () {\n      self.selectizedGP = $(self.refs.formref.digitGP).selectize({\n        options: [],\n        valueField: \"value\",\n        labelField: \"text\",\n        searchField: [\"value\"],\n        placeholder: \"獲得したGP\",\n        load: function (query, callback) {\n          if (!query.length) return callback();\n          query = Number(query);\n          callback([{ text: formatDigit(query, 4).toLocaleString(), value: formatDigit(query, 4) }, { text: formatDigit(query, 5).toLocaleString(), value: formatDigit(query, 5) }, { text: formatDigit(query, 6).toLocaleString(), value: formatDigit(query, 6) }, { text: formatDigit(query, 7).toLocaleString(), value: formatDigit(query, 7) }, { text: formatDigit(query, 8).toLocaleString(), value: formatDigit(query, 8) }, { text: formatDigit(query, 9).toLocaleString(), value: formatDigit(query, 9) }, { text: formatDigit(query, 10).toLocaleString(), value: formatDigit(query, 10) }]);\n        },\n        onChange: function (gp) {\n          self.objGp.dGp = Number(gp);\n          setValue();\n        }\n      });\n      $(self.objGp.sRadio).change(function () {\n        setValue();\n      });\n      $(self.objGp.lmRadio).change(function () {\n        setValue();\n      });\n      $(self.objGp.lsRadio).change(function () {\n        setValue();\n      });\n      $(self.objGp.cnRadio).change(function () {\n        setValue();\n      });\n    });\n  });\n});\n\n_riot2.default.tag2('gtdesc', '<div class=\"panel panel-default\"> <div class=\"panel-heading\"> <h4 class=\"panel-title\">ゲート詳細(祈り: {pray.toLocaleString()}%)</h4> </div> <div class=\"panel-body\"> <form ref=\"listref\"> <label class=\"checkbox-inline\" each=\"{list}\"> <input type=\"checkbox\" riot-value=\"{index}\" checked=\"{checked}\" onclick=\"{parent.toggle}\"> {index} </label> <table class=\"table\" ref=\"tableref\"> <thead> <tr> <th each=\"{item in tablelist}\">{item.index}</th> </tr> </thead> <tbody> <tr each=\"{seed in gtseed}\"> <th each=\"{item in tablelist}\">{seed[item.seedid]}</th> </tr> </tbody> </table> <p>ゲート(<span each=\"{item in tablelist}\">{item.index}/</span><span>): </span><span each=\"{seed in gtseed}\"><span each=\"{item in tablelist}\">{seed[item.seedid]}/</span><span>, </span></span></p> </form> </div> </div>', '', '', function (opts) {\n  this.list = [{ index: \"名前\", seedid: \"name\", checked: true }, { index: \"リーチ\", seedid: \"reach\", checked: true }, { index: \"範囲\", seedid: \"range\", checked: false }, { index: \"段数\", seedid: \"cmb\", checked: false }, { index: \"外皮\", seedid: \"skin\", checked: true }, { index: \"予想体力(1.75)\", seedid: \"midhp\", checked: false }];\n  this.pray = 0;\n  this.on(\"mount\", () => {\n    this.text = this.refs.tableref.innterText;\n  });\n  this.tablelist = createlist(this.list);\n  function createlist(list) {\n    return list.filter(l => l.checked === true);\n  }\n  this.toggle = function (e) {\n    let item = e.item;\n    item.checked = !item.checked;\n    this.tablelist = createlist(this.list);\n    this.update();\n  }.bind(this);\n  this.pray = 0;\n  this.gtseed = [];\n  this.obs.on(\"oncalc\", (pnum, pray) => {\n    if (pnum === \"2\") {\n      this.pray = pray;\n      this.gtseed = calchp(this.gtseed, this.pray);\n      this.update();\n    }\n  });\n  this.obs.on(\"onselect\", selected => {\n    this.gtseed = calchp(selected, this.pray);\n    this.update();\n  });\n  function calchp(seed = { hp: 0, size: 1.72 }, pray = 0) {\n    const scale = [1.0, 1.2, 1.4, 1.6, 1.8];\n    return seed.map((s, index) => {\n      s.midhp = numToString(s.hp / s.size * 1.750 * (1 + pray / 100) * scale[index]);\n      return s;\n    });\n  }\n  function numToString(num) {\n    var strarr = num.toString().split('.');\n    strarr[0] = Number(strarr[0]).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    return strarr[0];\n  }\n});\n\n_riot2.default.tag2('gtpanel', '<div class=\"panel {opts.pcolor}\"> <div class=\"panel-heading\"> <h4 class=\"panel-title\">{opts.ptitle}: <strong>{prayed}%</strong> ({minUpdated}分)</h4> </div> <div class=\"panel-body\"> <form ref=\"formref\" onsubmit=\"return false;\"> <fieldset class=\"form-group\" hide=\"{true}\"> <label>wave</label> <div class=\"btn-group btn-group-sm\" data-toggle=\"buttons\"> <label class=\"btn btn-default {active: isactive}\" each=\"{wave}\"> <input type=\"radio\" name=\"waveRadio\" autocomplete=\"off\" riot-value=\"{value}\"> {text} </label> </div> </fieldset> <fieldset class=\"form-group\"> <label>サイズ</label> <div class=\"btn-group btn-group-sm\" data-toggle=\"buttons\"> <label class=\"btn btn-default {active: isactive}\" each=\"{size}\"> <input type=\"radio\" name=\"sizeRadio\" autocomplete=\"off\" riot-value=\"{value}\"> {text} </label> </div> </fieldset> <fieldset class=\"form-group\"> <label>属性</label> <div class=\"btn-group btn-group-sm\" data-toggle=\"buttons\"> <label class=\"btn btn-default {active: isactive}\" each=\"{elem}\"> <input type=\"radio\" name=\"elemRadio\" autocomplete=\"off\" riot-value=\"{value}\"> {text} </label> </div> </fieldset> <fieldset class=\"form-group\"> <select class=\"form-control\" ref=\"seedref\" placeholder=\"シード名(5体まで)\"></select> </fieldset> <fieldset class=\"form-group\"> <select class=\"form-control\" ref=\"digitref\" placeholder=\"体力\"></select> </fieldset> </form> </div> </div>', 'gtpanel .panel-heading,[data-is=\"gtpanel\"] .panel-heading{ border-top-left-radius: inherit; border-top-right-radius: inherit; }', '', function (opts) {\n  var self = this;\n\n  self.prayed = \"-\";\n  self.minUpdated = \"-\";\n  self.eRadio = [];\n  self.sRadio = [];\n  self.wRadio = [];\n  self.seedFiltered = [];\n  self.seedArr = [];\n  self.seedHp = 0;\n  self.seedSelectized = [];\n  self.digitSelectized = [];\n  self.wave = [{ text: \"1体目\", isactive: true, value: 1.0 }, { text: \"2体目\", isactive: false, value: 1.2 }, { text: \"3体目\", isactive: false, value: 1.4 }, { text: \"4体目\", isactive: false, value: 1.6 }, { text: \"5体目\", isactive: false, value: 1.8 }];\n  self.size = [{ text: \"1.72\", isactive: false, value: 1.72 }, { text: \"1.75\", isactive: true, value: 1.75 }, { text: \"1.80\", isactive: false, value: 1.80 }, { text: \"1.00\", isactive: false, value: 1.00 }];\n  self.elem = [{ text: \"すべて\", isactive: true, value: \"all\" }, { text: \"炎\", isactive: false, value: \"fire\" }, { text: \"水\", isactive: false, value: \"water\" }, { text: \"風\", isactive: false, value: \"wind\" }, { text: \"光\", isactive: false, value: \"light\" }, { text: \"闇\", isactive: false, value: \"dark\" }];\n\n  function setFilter() {\n    if (self.eRadio.value === \"all\") {\n      self.seedFiltered = _seedlist.seedDef;\n    } else {\n      self.seedFiltered = _seedlist.seedDef.filter(s => s.elm === self.eRadio.value);\n    }\n    refresh(self.seedSelectized, self.seedFiltered);\n  }\n  function refresh(selectized, option) {\n    let control = selectized[0].selectize;\n    control.clearOptions();\n    control.addOption(option);\n    control.refreshOptions();\n  }\n  function setSeedM(seed) {\n    let arr = [];\n    for (let l = 0; l < seed.length; l++) {\n      let obj = _seedlist.seedDef.filter(s => s.name === seed[l])[0];\n      arr[l] = obj;\n    }\n    if (arr) {\n      self.seedArr = arr;\n    }\n    self.obs.trigger(\"onselect\", self.seedArr);\n  }\n  function setVal() {\n    let pray = calcPray({\n      seedhp: self.seedArr[0].hp,\n      seedsize: self.seedArr[0].size,\n      inputhp: self.seedHp,\n      scale: self.sRadio.value,\n      wave: self.wRadio.value\n    });\n    if (pray > 0) {\n      self.prayed = pray.toLocaleString();\n    } else {\n      self.prayed = \"0\";\n    }\n    self.obs.trigger(\"oncalc\", opts.pnum, pray);\n    self.update();\n  }\n  function formatDigit(val, dig) {\n    return val * Math.pow(10, dig - String(val).length);\n  }\n  function calcPray({ seedhp = 0, seedsize = 1.72, inputhp, scale, wave }) {\n    return Math.round((inputhp / (seedhp / seedsize * scale) - 1) * 100 / wave);\n  }\n\n  self.on('mount', () => {\n    self.wRadio = self.refs.formref.waveRadio;\n    self.sRadio = self.refs.formref.sizeRadio;\n    self.eRadio = self.refs.formref.elemRadio;\n    self.wRadio[0].checked = true;\n    self.sRadio[1].checked = true;\n    self.eRadio[0].checked = true;\n    self.seedFiltered = _seedlist.seedDef;\n    $(function () {\n      self.seedSelectized = $(self.refs.seedref).selectize({\n        options: self.seedFiltered,\n        valueField: \"name\",\n        labelField: \"name\",\n        searchField: [\"extname\"],\n        maxItems: 5,\n        placeholder: \"シード名\",\n        onChange: function (seed) {\n          setSeedM(seed);\n          setVal();\n        }\n      });\n      $(self.wRadio).change(function () {\n        setVal();\n      });\n      $(self.sRadio).change(function () {\n        setVal();\n      });\n      $(self.eRadio).change(function () {\n        setFilter();\n      });\n      self.digitSelectized = $(self.refs.digitref).selectize({\n        options: [],\n        valueField: \"value\",\n        labelField: \"text\",\n        searchField: [\"value\"],\n        placeholder: \"体力\",\n        load: function (query, callback) {\n          if (!query.length) return callback();\n          query = Number(query);\n          callback([{ text: formatDigit(query, 6).toLocaleString(), value: formatDigit(query, 6) }, { text: formatDigit(query, 7).toLocaleString(), value: formatDigit(query, 7) }, { text: formatDigit(query, 8).toLocaleString(), value: formatDigit(query, 8) }, { text: formatDigit(query, 9).toLocaleString(), value: formatDigit(query, 9) }, { text: formatDigit(query, 10).toLocaleString(), value: formatDigit(query, 10) }]);\n        },\n        onChange: function (hp) {\n          self.seedHp = Number(hp);\n          setVal();\n        }\n      });\n    });\n  });\n});\n\n_riot2.default.tag2('jst', '<h4>現在時刻: {clock}</h4>', '', '', function (opts) {\n  var self = this;\n  self.serverlist = ['https://ntp-a1.nict.go.jp/cgi-bin/json', 'https://ntp-b1.nict.go.jp/cgi-bin/json'];\n  self.serverurl = self.serverlist[Math.floor(Math.random() * self.serverlist.length)];\n  self.loaddate = Date.now();\n  axios.get(self.serverurl + \"?\" + self.loaddate / 1000).then(function (response) {\n    self.datediff = response.data.st * 1000 + (self.loaddate - response.data.it * 1000) / 2 - self.loaddate;\n    updatetime();\n  }).catch(function (response) {\n    throw new Error(\"つながってない\");\n  });\n  function updatetime() {\n    self.nowdate = new Date(Date.now() + self.datediff);\n    self.clock = dateprintf('%h時%i分%s.%u秒', self.nowdate);\n    self.update();\n    self.obs.trigger('onclock', dateprintf('%i', self.nowdate));\n    setTimeout(updatetime, 50);\n  }\n  function zerofill(number, digit) {\n    return ('00' + number).slice(digit * -1);\n  }\n  function dateprintf(format, date) {\n    if (!format) {\n      format = '%y/%m/%d %h:%i:%s.%u';\n    }\n    if (!(date instanceof Date)) {\n      date = new Date();\n    }\n    let year = date.getFullYear(),\n        month = zerofill(date.getMonth() + 1, 2),\n        date_n = zerofill(date.getDate(), 2),\n        hour = zerofill(date.getHours(), 2),\n        minute = zerofill(date.getMinutes(), 2),\n        second = zerofill(date.getSeconds(), 2),\n        milli_second = zerofill(date.getMilliseconds(), 3);\n    return format.replace(/(%*)%([ymdhisu])/g, function (a, escape_str, type) {\n      if (escape_str.length % 2 === 0) {\n        switch (type) {\n          case 'y':\n            type = year;\n            break;\n          case 'm':\n            type = month;\n            break;\n          case 'd':\n            type = date_n;\n            break;\n          case 'h':\n            type = hour;\n            break;\n          case 'i':\n            type = minute;\n            break;\n          case 's':\n            type = second;\n            break;\n          case 'u':\n            type = milli_second;\n            break;\n        }\n      }\n      return escape_str.replace(/%%/g, '%') + type;\n    });\n  }\n});\n\n_riot2.default.tag2('prpanel', '<div class=\"panel {opts.pcolor}\"> <div class=\"panel-heading\"> <h4 class=\"panel-title\">{opts.ptitle}: <strong>{prayed}%</strong> ({minUpdated}分)</h4> </div> <div class=\"panel-body\"> <form ref=\"formref\" onsubmit=\"return false;\"> <fieldset class=\"form-group\"> <label>wave</label> <div class=\"btn-group btn-group-sm\" data-toggle=\"buttons\"> <label class=\"btn btn-default {active: isactive}\" each=\"{wave}\"> <input type=\"radio\" name=\"waveRadio\" autocomplete=\"off\" riot-value=\"{value}\"> {text} </label> </div> </fieldset> <fieldset class=\"form-group\"> <label>サイズ</label> <div class=\"btn-group btn-group-sm\" data-toggle=\"buttons\"> <label class=\"btn btn-default {active: isactive}\" each=\"{size}\"> <input type=\"radio\" name=\"sizeRadio\" autocomplete=\"off\" riot-value=\"{value}\"> {text} </label> </div> </fieldset> <fieldset class=\"form-group\"> <label>属性</label> <div class=\"btn-group btn-group-sm\" data-toggle=\"buttons\"> <label class=\"btn btn-default {active: isactive}\" each=\"{elem}\"> <input type=\"radio\" name=\"elemRadio\" autocomplete=\"off\" riot-value=\"{value}\"> {text} </label> </div> </fieldset> <fieldset class=\"form-group\"> <select class=\"form-control\" ref=\"seedref\" placeholder=\"シード名\"></select> </fieldset> <fieldset class=\"form-group\"> <select class=\"form-control\" ref=\"digitref\" placeholder=\"体力\"></select> </fieldset> </form> </div> </div>', 'prpanel .panel-heading,[data-is=\"prpanel\"] .panel-heading{ border-top-left-radius: inherit; border-top-right-radius: inherit; }', '', function (opts) {\n  var self = this;\n  self.prayed = \"-\";\n  self.clockmin = \"\";\n  self.minUpdated = \"-\";\n  self.eRadio = [];\n  self.sRadio = [];\n  self.wRadio = [];\n  self.seedFiltered = [];\n  self.seedObj = {};\n  self.seedHp = 0;\n  self.seedSelectized = [];\n  self.digitSelectized = [];\n  self.wave = [{ text: \"1体目\", isactive: true, value: 1.0 }, { text: \"2体目\", isactive: false, value: 1.2 }, { text: \"3体目\", isactive: false, value: 1.4 }, { text: \"4体目\", isactive: false, value: 1.6 }, { text: \"5体目\", isactive: false, value: 1.8 }];\n  self.size = [{ text: \"1.72\", isactive: true, value: 1.72 }, { text: \"1.75\", isactive: false, value: 1.75 }, { text: \"1.80\", isactive: false, value: 1.80 }, { text: \"1.00\", isactive: false, value: 1.00 }];\n  self.elem = [{ text: \"すべて\", isactive: true, value: \"all\" }, { text: \"炎\", isactive: false, value: \"fire\" }, { text: \"水\", isactive: false, value: \"water\" }, { text: \"風\", isactive: false, value: \"wind\" }, { text: \"光\", isactive: false, value: \"light\" }, { text: \"闇\", isactive: false, value: \"dark\" }];\n\n  function setFilter() {\n    if (self.eRadio.value === \"all\") {\n      self.seedFiltered = _seedlist.seedDef;\n    } else {\n      self.seedFiltered = _seedlist.seedDef.filter(s => s.elm === self.eRadio.value);\n    }\n    refresh(self.seedSelectized, self.seedFiltered);\n  }\n  function refresh(selectized, option) {\n    let control = selectized[0].selectize;\n    control.clearOptions();\n    control.addOption(option);\n    control.refreshOptions();\n  }\n  function setSeed(seed) {\n    let obj = _seedlist.seedDef.filter(s => s.name === seed)[0];\n    if (obj) {\n      self.seedObj = obj;\n    }\n  }\n  function setVal() {\n    let pray = calcPray({\n      seedhp: self.seedObj.hp,\n      seedsize: self.seedObj.size,\n      inputhp: self.seedHp,\n      scale: self.sRadio.value,\n      wave: self.wRadio.value\n    });\n    if (pray > 0) {\n      self.prayed = pray.toLocaleString();\n    } else {\n      self.prayed = \"0\";\n    }\n    self.minUpdated = self.clockmin;\n    self.obs.trigger(\"oncalc\", opts.pnum, pray);\n    self.update();\n  }\n  function formatDigit(val, dig) {\n    return val * Math.pow(10, dig - String(val).length);\n  }\n  function calcPray({ seedhp = 0, seedsize = 1.72, inputhp, scale, wave }) {\n    return Math.round((inputhp / (seedhp / seedsize * scale) - 1) * 100 / wave);\n  }\n  self.obs.on('onclock', function (clockmin) {\n    self.clockmin = clockmin;\n  });\n\n  self.on('mount', () => {\n    self.wRadio = self.refs.formref.waveRadio;\n    self.sRadio = self.refs.formref.sizeRadio;\n    self.eRadio = self.refs.formref.elemRadio;\n    self.wRadio[0].checked = true;\n    self.sRadio[0].checked = true;\n    self.eRadio[0].checked = true;\n    self.seedFiltered = _seedlist.seedDef;\n    $(function () {\n      self.seedSelectized = $(self.refs.seedref).selectize({\n        options: self.seedFiltered,\n        valueField: \"name\",\n        labelField: \"name\",\n        searchField: [\"extname\"],\n        placeholder: \"シード名\",\n        onChange: function (seed) {\n          setSeed(seed);\n          setVal();\n        }\n      });\n      $(self.wRadio).change(function () {\n        setVal();\n      });\n      $(self.sRadio).change(function () {\n        setVal();\n      });\n      $(self.eRadio).change(function () {\n        setFilter();\n      });\n      self.digitSelectized = $(self.refs.digitref).selectize({\n        options: [],\n        valueField: \"value\",\n        labelField: \"text\",\n        searchField: [\"value\"],\n        placeholder: \"体力\",\n        load: function (query, callback) {\n          if (!query.length) return callback();\n          query = Number(query);\n          callback([{ text: formatDigit(query, 6).toLocaleString(), value: formatDigit(query, 6) }, { text: formatDigit(query, 7).toLocaleString(), value: formatDigit(query, 7) }, { text: formatDigit(query, 8).toLocaleString(), value: formatDigit(query, 8) }, { text: formatDigit(query, 9).toLocaleString(), value: formatDigit(query, 9) }, { text: formatDigit(query, 10).toLocaleString(), value: formatDigit(query, 10) }]);\n        },\n        onChange: function (hp) {\n          self.seedHp = Number(hp);\n          setVal();\n        }\n      });\n    });\n  });\n});"},"hash":"275f40fedb63861134dbb77e093ba906"}